.program cppm_decoder

.define public NUM_CHANNELS 10
.define public CLOCKS_PER_COUNT 5

init:
  ; These instructions are executed manually in the init function
  ; set y, 0
  ; pull block ; Load OSR with max period duration

flush_channels_and_sync:
  set x, 1

; enables re-sync if x > 0
flush_channels:
  jmp y-- continue_flush_channels
  jmp !x ready_for_clean_frame
  jmp wait_for_long_high
continue_flush_channels:
  in null, 32 ; load 0 into ISR and autopush to FIFO
  jmp flush_channels

wait_for_long_high:
  mov x, osr ; start timer for max period
wait_for_long_high_loop:
  jmp pin nojmp_wait_for_long_high
  jmp wait_for_long_high ; pin is not high, start over
nojmp_wait_for_long_high:
  jmp x-- wait_for_long_high_loop [3] ; delay to match wait_for_low loop

ready_for_clean_frame:
  set y, NUM_CHANNELS
  set x, 0

wait_for_low:
  jmp pin pin_not_low
  jmp pulse_start_edge
pin_not_low:
  jmp !x wait_for_low ; wait indefinitely if x is already 0
  jmp x-- nojmp_wait_for_low
nojmp_wait_for_low:
  jmp !x flush_channels ; x just reached 0, flush the frame
  jmp wait_for_low

pulse_start_edge:
  jmp !x after_value_push ; first pulse edge of a frame, no value
  jmp !y after_value_push ; too many channels, discard value
  in x, 32 ; autopush
  jmp y-- after_value_push
after_value_push:
  mov x, osr ; start counting time to next pulse edge

wait_for_high:
  jmp !x flush_channels_and_sync ; timeout during pulse, re-sync
  jmp pin wait_for_low
  jmp x-- wait_for_high [2] ; delay to match wait_for_low loop


% c-sdk {
static inline void cppm_decoder_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = cppm_decoder_program_get_default_config(offset);

    sm_config_set_jmp_pin(&c, pin);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    sm_config_set_in_shift(&c, /*shift_right=*/true, /*autopush=*/true, 32);

    pio_sm_init(pio, sm, offset, &c);

    pio_sm_exec_wait_blocking(pio, sm, pio_encode_set(pio_y, 0));
    pio_sm_exec(pio, sm, pio_encode_pull(/*if_empty=*/false, /*block=*/true));

    pio_sm_set_enabled(pio, sm, true);
}
%}
